@using MudTemplate.Client.Auth;
@using MudTemplate.Client.Pages.Authentication
@using MudTemplate.Components.Helpers.JsExtensions;
@inherits LayoutComponentBase
@inject TokenRenewer tokenRenewer
@inject NavigationManager _navManager
@inject IJSRuntime _js


<MudThemeProvider Theme="new MudBlazorAdminDashboard()" />
<MudDialogProvider />
<MudSnackbarProvider />

<AuthorizeView>
    <Authorized>
        <MudLayout>
            <MudAppBar Elevation="1">
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Dark" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
                <MudText Color="Color.Dark">Hello, @context.User.Identity.Name</MudText>
                <MudSpacer />
                <MudMenu Icon="@Icons.Material.Filled.MoreVert" Color="Color.Dark">
                    <MudMenuItem>My account</MudMenuItem>
                    <MudMenuItem Href="/logout">Logout</MudMenuItem>
                </MudMenu>
            </MudAppBar>
            <MudDrawer @bind-Open="_drawerOpen" Elevation="2">
                <MudDrawerHeader>
                    <MudText Typo="Typo.h6" Color="Color.Tertiary" Class="mt-1 bg-white">MudBlazor Template</MudText>
                </MudDrawerHeader>
                <NavMenu />
            </MudDrawer>
            <MudMainContent>
                <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="pa-8">
                    @Body
                </MudContainer>
            </MudMainContent>
        </MudLayout>
    </Authorized>
    <NotAuthorized>
        <MudLayout>

                <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="pa-8">
             @*       <Login />*@
                </MudContainer>

        </MudLayout>
    </NotAuthorized>
</AuthorizeView>


@code {
    private ThemeManagerTheme _themeManager = new ThemeManagerTheme();
    [CascadingParameter] public Task<AuthenticationState> AuthenticationState { get; set; }

    public bool _drawerOpen = true;
    public bool _themeManagerOpen = false;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationState;
        if (authState.User.Identity.IsAuthenticated)
        {
            await _js.InitializeInactivityTimer(DotNetObjectReference.Create(this));
            tokenRenewer.Initiate();

        }
        else
        {
           _navManager.NavigateTo("/logout");
        }

    }

    [JSInvokable]
    public async Task Logout()
    {
        var authState = await AuthenticationState;
        if (authState.User.Identity.IsAuthenticated)
        {
            _navManager.NavigateTo("/logout");
        }
    }


}