@page "/pages/authentication/register"

@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions

@inject NavigationManager _navManager
@inject IAccountService _accountService
@inject ISnackbar Snackbar
@layout LoginLayout




<MudText Typo="Typo.h4" GutterBottom="true">Sign Up</MudText>
<MudText>Already have an account? <MudLink Href="/pages/authentication/login">Sign In</MudLink></MudText>

<MudForm @bind-IsValid="@success" @ref="form">
    <MudTextField T="string"
                  Label="E-mail"
                  Variant="Variant.Outlined"
                  Class="mt-4" Required="true"
                  RequiredError="required"
                  @bind-Value="UserDetails.UserName"></MudTextField>

    <MudTextField @bind-Value="@UserDetails.Password"
                  Label="Password"
                  Variant="Variant.Outlined"
                  InputType="@PasswordInput"
                  Adornment="Adornment.End"
                  AdornmentIcon="@PasswordInputIcon"
                  OnAdornmentClick="TogglePasswordVisibility"
                  Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))"
                  Class="mt-4" Required="true"
                  RequiredError="required" />
    <MudButton Class="mt-3" Variant="Variant.Filled" Color="Color.Primary" OnClick="RegisterUser" Size="Size.Large" FullWidth="true">Register</MudButton>

</MudForm>

@code {
    private User UserDetails { get; set; } = new();
    MudForm form = new();
    bool success = false;
    string[] errors = { };

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    bool PasswordVisibility;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void TogglePasswordVisibility()
    {
        @if (PasswordVisibility)
        {
            PasswordVisibility = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            PasswordVisibility = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private async Task RegisterUser()
    {
        await form?.Validate();

        if (success)
        {
            var response = await _accountService.CreateUser<APIResponse<bool?>>(UserDetails);
            if (response.IsSuccess)
            {
                _navManager.NavigateTo("/pages/authentication/login");
            }
            else
            {
                Snackbar.Add("Something went wrong", Severity.Error);
            }

        }


    }

}