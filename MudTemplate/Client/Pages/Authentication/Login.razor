@page "/"
@page "/pages/authentication/login"
@using MudTemplate.Client.Auth;

@layout LoginLayout
@inject NavigationManager _navigationManager
@inject IAccountService _accountService
@inject ILoginService _loginService




<MudText Typo="Typo.h4" GutterBottom="true">Sign In</MudText>

<MudText>Don't have an account? <MudLink Href="/pages/authentication/register">Sign Up</MudLink></MudText>

<MudForm @bind-IsValid="@success" @ref="form">
    <MudTextField T="string" @bind-Value="@authRequest.UserName" Label="E-mail"
                  Required="true"
                  RequiredError="required" Variant="Variant.Outlined" Class="my-6"></MudTextField>

    <MudTextField @bind-Value="@authRequest.Password"
                  Required="true"
                  RequiredError="required" 
    Label="Password" Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="TogglePasswordVisibility" />

</MudForm>
<div Class="d-flex justify-space-between align-center">
    <MudCheckBox T="bool" Label="Remember me?" Color="Color.Primary" Class="ml-n1 my-3"></MudCheckBox>
    <MudLink Href="/pages/authentication/forgot-password">Forgot pwd?</MudLink>
</div>

<LoadingButton Processing="@Loading" CallBack="ValidateForm" ButtonText="Login" FullWidth="true"/>

@if (ErrorMessage is not null)
{
    <MudAlert Severity="Severity.Error" Class="mt-8 mud-width-full" Style="max-width:500px;" Elevation="25">@ErrorMessage</MudAlert>
}


@code {
    bool Loading = false;
    AuthRequest authRequest = new()
    {
        UserName = "ulises@test.com",
        Password = "Admin123*"
    };
    string ErrorMessage;
    bool PasswordVisibility;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    MudForm form = new();
    bool success = false;
    string[] errors = { };

    void TogglePasswordVisibility()
    {
        @if (PasswordVisibility)
        {
            PasswordVisibility = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            PasswordVisibility = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private async Task ValidateForm()
    {
        ErrorMessage = null;
        await form?.Validate();

        if (success)
        {
            await TryLogin();

        }
        else
        {
            ErrorMessage = "Please enter username and password";
        }
    }

    private async Task TryLogin()
    {
        Loading = true;
        var apiResults = await _accountService.Login<APIResponse<AuthResponse>>(authRequest);
        if (apiResults.IsSuccess)
        {
            if (apiResults.Result is not null)
            {
                await _loginService.Login(new UserToken
                {
                    Token = apiResults.Result.Token,
                    RefreshToken = apiResults.Result.RefreshToken,
                    Expiration = apiResults.Result.TokenExpDate

                });

                _navigationManager.NavigateTo("/home");
            }
            else
            {
                ErrorMessage = apiResults.ErrorMessages.FirstOrDefault();
            }
        }
        else
        {
            ErrorMessage = "Network issues found.";
        }
        Loading = false;
    }
}